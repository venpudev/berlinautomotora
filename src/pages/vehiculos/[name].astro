---
import Layout from '../../layouts/Layout.astro';
import { fetchAllVehicles, getCarsByIds } from '../../lib/fetchSliders';
import { formatNameForURL, extractYearFromName } from "../../helpers/stringHelpers";
import { formatPrice } from "../../helpers/formatHelpers";
import Hero from '@/components/hero-slider/Hero.tsx';

export const prerender = false;

const { name } = Astro.params;

if (!name) {
    return new Response(null, { status: 404, statusText: 'Página no encontrada' });
}

// --- LÓGICA DE OBTENCIÓN DE DATOS ---
const allVehicles = await fetchAllVehicles();
const vehicleData = allVehicles.find(v => formatNameForURL(v.name) === name);

if (!vehicleData) {
    return new Response(null, { status: 404, statusText: 'Vehículo no encontrado' });
}

const response = await getCarsByIds({ id: String(vehicleData.id) });
const vehicle = response?.data;

// --- VALIDACIÓN DEFINITIVA ---
// Si 'vehicle' no existe después de la llamada a la API, detenemos todo aquí.
if (!vehicle) {
    console.error(`Error: No se encontraron datos para el vehículo con ID: ${vehicleData.id}`);
    return new Response(null, { status: 404, statusText: 'Datos del vehículo no disponibles' });
}

// --- PREPARACIÓN DE DATOS PARA EL COMPONENTE ---
const formattedPrice = formatPrice(vehicle.price);
const vehicleYear = extractYearFromName(vehicle.name);

// Lógica segura para construir el array de imágenes
let finalImages: { url: string; alt: string }[] = [];
if (vehicle.imageGallery && Array.isArray(vehicle.imageGallery) && vehicle.imageGallery.length > 0) {
    finalImages = vehicle.imageGallery
        .map(img => {
            const url = typeof img === 'string' ? img : (img as any)?.imageUrl || (img as any)?.url;
            return url ? { url, alt: `Imagen de ${vehicle.name}` } : null;
        })
        .filter((img): img is { url: string; alt: string } => img !== null && img.url);
} else if (vehicle.imageUrl) {
    finalImages = [{ url: vehicle.imageUrl, alt: `Imagen de ${vehicle.name}` }];
}

const ogImage = finalImages.length > 0 ? finalImages[0].url : '/default-og-image.jpg';
---

<Layout title={`${vehicle.name} - Berlin Automotora`} description={`${vehicle.name} - ${formattedPrice}`} image={ogImage}>
    <main class="min-h-screen bg-gray-50">
        <nav class="bg-white border-b border-gray-200 px-4 py-3 sticky top-[5rem] z-40">
            <div class="max-w-7xl mx-auto flex items-center text-sm text-gray-600">
                <a href="/" class="hover:text-red-600">Inicio</a>
                <span class="mx-2">/</span>
                <a href="/catalogo" class="hover:text-red-600">Vehículos</a>
                <span class="mx-2">/</span>
                <span class="text-gray-900 font-medium truncate">{vehicle.name}</span>
            </div>
        </nav>

        <div class="max-w-7xl mx-auto py-8 px-4">
            <Hero client:load images={finalImages} />
        </div>

        <div class="bg-white border-t border-b border-gray-200 px-4 py-4">
            <div class="max-w-7xl mx-auto">
                <h1 class="text-xl md:text-2xl font-bold text-gray-900 mb-2">{vehicle.name}</h1>
                <div class="flex items-center space-x-3">
                    <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${vehicle.available ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                        {vehicle.available ? 'Disponible' : 'Vendido'}
                    </span>
                    <span class="text-2xl md:text-3xl font-bold text-gray-900">{formattedPrice}</span>
                </div>
            </div>
        </div>

        </main>
</Layout>